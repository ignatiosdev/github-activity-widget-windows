{"version":3,"file":"ui_packages_ui-commands_ui-commands_ts-xxxxxxxxxxxx.js","mappings":"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","sources":["ui/packages/get-os/get-os.ts","ui/packages/hotkey/hotkey.ts","ui/packages/hotkey/keyboard-shortcuts-helper.ts","ui/packages/ui-commands/command-event.ts","ui/packages/ui-commands/commands-registry.ts","ui/packages/ui-commands/commands.ts","ui/packages/ui-commands/components/CommandButton.tsx","ui/packages/ui-commands/metrics.ts","ui/packages/ui-commands/use-detect-conflicts.ts","ui/packages/ui-commands/utils.ts","ui/packages/ui-commands/use-on-key-down.ts","ui/packages/ui-commands/components/GlobalCommands.tsx","ui/packages/ui-commands/commands-context.ts","ui/packages/ui-commands/components/CommandKeybindingHint.tsx","ui/packages/ui-commands/components/CommandActionListItem.tsx","ui/packages/ui-commands/components/CommandIconButton.tsx","ui/packages/ui-commands/components/ScopedCommands.tsx","ui/packages/use-ignore-keyboard-actions-while-composing/use-ignore-keyboard-actions-while-composing.ts","ui/packages/use-tracking-ref/use-tracking-ref.ts"],"sourcesContent":["import type {NavigatorUA} from './@types/user-agent-data'\nimport {ssrSafeWindow} from '@github-ui/ssr-utils'\n\nexport type NavigatorUserAgent = NavigatorUA\n\nexport const OS = {\n  Android: 'Android',\n  iOS: 'iOS',\n  macOS: 'macOS',\n  Windows: 'Windows',\n  Linux: 'Linux',\n  Unknown: 'Unknown',\n}\nexport type OS = (typeof OS)[keyof typeof OS]\n\nexport type OSInformation = {\n  os: OS\n  isAndroid: boolean\n  isIOS: boolean\n  isLinux: boolean\n  isMacOS: boolean\n  isWindows: boolean\n  isDesktop: boolean\n  isMobile: boolean\n}\n\nexport function getOS(): OSInformation {\n  let os: OS = OS.Unknown\n  let isMobileOS = false\n  if (ssrSafeWindow) {\n    // TypeScript doesn't 'know' about userAgentData yet\n    const navigator = ssrSafeWindow.navigator as Navigator & NavigatorUA\n    const userAgent = navigator.userAgent\n    const platform = navigator?.userAgentData?.platform || navigator.platform\n    const macosPlatforms = ['Macintosh', 'MacIntel', 'MacPPC', 'Mac68K', 'macOS']\n    const windowsPlatforms = ['Win32', 'Win64', 'Windows', 'WinCE']\n    const iosPlatforms = ['iPhone', 'iPad', 'iPod']\n\n    if (macosPlatforms.indexOf(platform) !== -1) {\n      os = OS.macOS\n    } else if (iosPlatforms.indexOf(platform) !== -1) {\n      os = OS.iOS\n    } else if (windowsPlatforms.indexOf(platform) !== -1) {\n      os = OS.Windows\n    } else if (/Android/.test(userAgent)) {\n      os = OS.Android\n    } else if (/Linux/.test(platform)) {\n      os = OS.Linux\n    }\n    isMobileOS = navigator?.userAgentData?.mobile ?? (os === OS.Android || os === OS.iOS)\n  }\n\n  return {\n    os,\n    isAndroid: os === OS.Android,\n    isIOS: os === OS.iOS,\n    isMacOS: os === OS.macOS,\n    isWindows: os === OS.Windows,\n    isLinux: os === OS.Linux,\n    isDesktop: os === OS.macOS || os === OS.Windows || os === OS.Linux,\n    isMobile: isMobileOS,\n  }\n}\n\nexport function isMobile(): boolean {\n  return getOS().isMobile\n}\n\nexport function isDesktop(): boolean {\n  return getOS().isDesktop\n}\n\nexport function isAndroid(): boolean {\n  return getOS().isAndroid\n}\n\nexport function isIOS(): boolean {\n  return getOS().isIOS\n}\n\nexport function isMacOS(): boolean {\n  return getOS().isMacOS\n}\n\nexport function isWindows(): boolean {\n  return getOS().isWindows\n}\n\nexport function isLinux(): boolean {\n  return getOS().isLinux\n}\n","// this file is a shim to allow importing @github/hotkey and is the only allowed import for @github/hotkey\n// eslint-disable-next-line no-restricted-imports\nexport * from '@github/hotkey'\n\n// - (?:^|,)    Starting with the beginning of the string or the comma delineating the previous item\n// - ((?:[^,]|,(?=\\+| |$))*(?:,(?=,))?)    The target capture group, consisting of:\n//   - (?:[^,]|,(?=\\+| |$))*    Any number of characters that are not commas, or are commas that are followed by a\n//     plus sign, space, or end of string (ie, the commas in `,+Control` or `Control+, g` or `Control+,`)\n//   - (?:,(?=,))?    Optionally ending with a comma followed by another comma, like the commas in `Control+,,n` or\n//     `Control+,,,`\n// - (?=,|$)    Ending with a comma or the end of the string\nconst chordOrKeyRegex = /(?:^|,)((?:[^,]|,(?=\\+| |$))*(?:,(?=,))?)/g\n\nexport function splitHotkeyString(hotkey: string) {\n  // \",\" is a valid key name, so we can't just use `String.split()`. Even with a regular expression we can't split, for\n  // example \"Control+,,,\" into [\"Control+,\", \",\"] without a lookbehind (not supported in Safari).\n\n  // Instead, we match against all valid substrings:\n  return Array.from(hotkey.matchAll(chordOrKeyRegex)).map(([, chord]) => chord!)\n}\n","import {eventToHotkeyString} from './hotkey'\n\n/** Returns false if a user has explicitly disabled character key shortcuts. */\nexport const areCharacterKeyShortcutsEnabled = () => {\n  // we don't have a document in the context of SSR.\n  // In that case, we don't need to allow keyboard shortcuts.\n  if (typeof document === 'undefined') return false\n\n  const keyboardShortcutsPreference = document.querySelector<HTMLMetaElement>(\n    'meta[name=keyboard-shortcuts-preference]',\n  )\n  if (keyboardShortcutsPreference) {\n    return keyboardShortcutsPreference.content === 'all'\n  }\n  return true\n}\n\n/**\n * Character-key shortcuts are implemented only with lowercase characters (\"g\", \"g f\"), uppercase characters (\"Shift+A\", \"a\"),\n * symbols (\"Alt+g\"), and punctuation (\"?\", \"!\", \"/\").\n *\n * Returns true if string is NOT what we define as a character key shortcut.\n */\nexport const isNonCharacterKeyShortcut = (hotkey: string) => {\n  return /Enter|Arrow|Escape|Meta|Control|Mod|Esc/.test(hotkey) || (hotkey.includes('Alt') && hotkey.includes('Shift'))\n}\n\nconst nonEditableInputTypes = new Set([\n  'button',\n  'checkbox',\n  'color',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit',\n])\n\n/**\n * Returns true if `element` is editable - that is, if it can be focused and typed in like an input or textarea.\n */\nexport function isEditableElement(target: EventTarget | null): boolean {\n  if (!(target instanceof HTMLElement)) return false\n\n  const name = target.nodeName.toLowerCase()\n  const type = target.getAttribute('type')?.toLowerCase() ?? 'text'\n\n  const isReadonly =\n    target.ariaReadOnly === 'true' ||\n    target.getAttribute('aria-readonly') === 'true' ||\n    target.getAttribute('readonly') !== null\n\n  return (\n    (name === 'select' ||\n      name === 'textarea' ||\n      (name === 'input' && !nonEditableInputTypes.has(type)) ||\n      target.isContentEditable) &&\n    !isReadonly\n  )\n}\n\n/**\n * Returns false if a user settings has character key shortcut disabled and keyboard event corresponds to a character\n * key shortcut. Character key shortcuts are never enabled on editable form inputs.\n */\nexport const isShortcutAllowed = (event: KeyboardEvent) => {\n  const hotkey = eventToHotkeyString(event)\n\n  // Never allow character key shortcuts in inputs\n  const allowCharacterKeyShortcuts = areCharacterKeyShortcutsEnabled() && !isEditableElement(event.target)\n\n  return isNonCharacterKeyShortcut(hotkey) || allowCharacterKeyShortcuts\n}\n","import {CommandId} from './commands'\n\nexport class CommandEvent<Id extends CommandId = CommandId> {\n  constructor(public readonly commandId: Id) {}\n}\n\nexport type CommandEventHandler<Id extends CommandId = CommandId> = (event: CommandEvent<Id>) => void\n\nexport type CommandEventHandlersMapEntry<Id extends CommandId = CommandId> = [key: Id, handler: CommandEventHandler<Id>]\n\nexport type CommandEventHandlersMap = {\n  [Id in CommandId]?: CommandEventHandler<Id>\n}\nexport const CommandEventHandlersMap = {\n  /**\n   * Iterate over the entries in a handlers map.\n   *\n   * `Object.entries` will broaden the entry type to `[string, CommandEventHandler]` because objects can have unknown\n   * keys (ie, `{a: 1, b: 2}` is assignable to `{a: number}`), so this narrows it back down.\n   */\n  entries: (map: CommandEventHandlersMap) =>\n    Object.entries(map).filter(\n      (entry): entry is CommandEventHandlersMapEntry => CommandId.is(entry[0]) && entry[1] !== undefined,\n    ),\n  keys: (map: CommandEventHandlersMap) => Object.keys(map).filter(CommandId.is),\n}\n","import {useEffect, useId} from 'react'\n\nimport {CommandEventHandlersMap} from './command-event'\nimport {CommandId, getCommandMetadata, getServiceMetadata, type ServiceId} from './commands'\n\n/**\n * Registered command IDs. The key is a globally unique ID for each source that will be used to unregister or update\n * the commands; this allows commands to be registered multiple times on a page (ie, in different scopes).\n */\nconst registeredCommands = new Map<string, CommandId[]>()\n\nexport type UIService = {\n  id: string\n  name: string\n}\n\nexport type UICommand = {\n  id: CommandId\n  name: string\n  description: string\n  keybinding?: string | string[]\n}\n\nexport type UICommandGroup = {\n  service: UIService\n  commands: UICommand[]\n}\n\n/**\n * Get the set of IDs of all commands currently registered on the page, regardless of scope. From these IDs the\n * command metadata can be obtained with `getCommandMetadata(commandId)`, and the service metadata can be obtained with\n * `getServiceMetadata(CommandId.getServiceId(commandId))`.\n */\nexport function getAllRegisteredCommands(): UICommandGroup[] {\n  const uiCommandGroupMap = new Map<ServiceId, UICommandGroup>()\n  for (const commandId of new Set(Array.from(registeredCommands.values()).flat())) {\n    const serviceId = CommandId.getServiceId(commandId)\n    if (!uiCommandGroupMap.has(serviceId)) {\n      const service = getServiceMetadata(serviceId)\n      uiCommandGroupMap.set(serviceId, {\n        service: {id: service.id, name: service.name},\n        commands: [],\n      })\n    }\n    const command = getCommandMetadata(commandId)\n    if (command && command.defaultBinding) {\n      uiCommandGroupMap.get(serviceId)?.commands.push({\n        id: commandId,\n        name: command.name,\n        description: command.description,\n        keybinding: command.defaultBinding,\n      })\n    }\n  }\n\n  return Array.from(uiCommandGroupMap.values())\n}\n\n/** Register commands into the global command registry for display in help dialog. */\nexport const useRegisterCommands = (commands: CommandEventHandlersMap) => {\n  const sourceId = useId()\n\n  useEffect(() => {\n    registeredCommands.set(sourceId, CommandEventHandlersMap.keys(commands))\n\n    return () => {\n      registeredCommands.delete(sourceId)\n    }\n  }, [commands, sourceId])\n}\n","import {isFeatureEnabled} from '@github-ui/feature-flags'\nimport type {NormalizedSequenceString} from '@github-ui/hotkey'\nimport {normalizeSequence} from '@github-ui/hotkey'\n\nimport jsonMetadata from './__generated__/ui-commands.json'\n\nconst {commands, services} = jsonMetadata\n\nconst serviceCommandIds = new Set(Object.keys(commands) as CommandId[])\n\nexport type ServiceId = keyof typeof services\n\n/** Full joined command ID (in `serviceId:commandId` form). */\nexport type CommandId = keyof typeof commands\nexport const CommandId = {\n  is: (str: string): str is CommandId => serviceCommandIds.has(str as CommandId),\n  getServiceId: (commandId: CommandId) => commandId.split(':')[0] as ServiceId,\n}\n\nexport interface CommandMetadata {\n  name: string\n  description: string\n  defaultBinding?: string\n  featureFlag?: string\n}\n\n/**\n * Get the documentation metadata for the given command. Returns `undefined` if the command is\n * disabled via feature flag.\n */\nexport const getCommandMetadata = (commandId: CommandId) => {\n  const metadata = commands[commandId] as CommandMetadata\n  return !metadata.featureFlag || isFeatureEnabled(metadata.featureFlag.toUpperCase()) ? metadata : undefined\n}\n\n/** Get the documentation metadata for the given service. */\nexport const getServiceMetadata = (serviceId: ServiceId) => services[serviceId]\n\nexport const getKeybinding = (commandId: CommandId): NormalizedSequenceString | undefined => {\n  const metadata = getCommandMetadata(commandId)\n  return metadata?.defaultBinding ? normalizeSequence(metadata.defaultBinding) : undefined\n}\n\n/** Returns a map of id to keybinding, without entries for commands that don't have keybindings. */\nexport const getKeybindings = (commandIds: CommandId[]) =>\n  new Map(\n    commandIds\n      .map(id => [id, getKeybinding(id)])\n      .filter((entry): entry is [CommandId, NormalizedSequenceString] => entry[1] !== undefined),\n  )\n","import type {ButtonProps} from '@primer/react'\nimport {Button} from '@primer/react'\nimport type {KeybindingHintProps} from '@primer/react/experimental'\nimport {forwardRef} from 'react'\n\nimport {type CommandId, getCommandMetadata} from '../commands'\nimport {useCommandsContext} from '../commands-context'\nimport {CommandKeybindingHint} from './CommandKeybindingHint'\n\nexport interface CommandButtonProps extends Omit<ButtonProps, 'onClick'> {\n  commandId: CommandId\n  /** If `children` is not provided, the button will render the command name as its label by default. */\n  children?: ButtonProps['children']\n  /** If `true` and no `trailingVisual` is set, will render a keybinding hint as the trailing visual. */\n  showKeybindingHint?: boolean\n\n  keybindingHintVariant?: KeybindingHintProps['variant']\n}\n\n/**\n * `CommandButton` is a wrapper around `@primer/react` `Button`, but instead of an `onClick` handler it takes a\n * command ID and handles clicks by emitting command trigger events.\n *\n * If the command is gated by a disabled feature flag, nothing will render.\n */\nexport const CommandButton = forwardRef<HTMLButtonElement, CommandButtonProps>(\n  ({commandId, children, trailingVisual, showKeybindingHint = false, keybindingHintVariant, ...forwardProps}, ref) => {\n    const metadata = getCommandMetadata(commandId)\n    const {triggerCommand} = useCommandsContext()\n\n    if (!metadata) return null\n\n    const variant = keybindingHintVariant ?? (forwardProps.variant === 'primary' ? 'onEmphasis' : 'normal')\n\n    // trailingVisual only accepts components, not JSX, so we have to jump through hoops to render anything more complex\n    // than an icon (https://github.com/primer/react/issues/3948)\n    // This becomes part of the label which gets noisy (but we don't want to hide this info from screen reader users),\n    // so we wrap in hidden parentheses to offset it a little and make it read better\n    const HintVisual = () => (\n      <>\n        <span className=\"sr-only\">(</span>\n        <CommandKeybindingHint commandId={commandId} format=\"condensed\" variant={variant} />\n        <span className=\"sr-only\">)</span>\n      </>\n    )\n\n    return (\n      <Button\n        {...forwardProps}\n        onClick={event => triggerCommand(commandId, event.nativeEvent)}\n        trailingVisual={trailingVisual ?? showKeybindingHint ? HintVisual : undefined}\n        ref={ref}\n      >\n        {children ?? metadata.name}\n      </Button>\n    )\n  },\n)\nCommandButton.displayName = 'CommandButton'\n\ntry{ HintVisual.displayName ||= 'HintVisual' } catch {}","import {AnalyticsClient} from '@github/hydro-analytics-client'\nimport type {NormalizedSequenceString} from '@github-ui/hotkey'\n\nimport type {CommandEvent} from './command-event'\nimport {type CommandId, getKeybinding} from './commands'\n\n/** https://hydro.githubapp.com/hydro_analytics/apps/ui-commands */\nconst HYDRO_APP_ID = 'ui-commands'\n\nconst client = new AnalyticsClient({\n  collectorUrl: `https://collector.githubapp.com/${HYDRO_APP_ID}/collect`,\n})\n\ntype CommandTriggerEvent = {\n  /** Full command ID in `service:command` form. */\n  command_id: CommandId\n  /**\n   * How the event was triggered. More event methods may be added in the future:\n   *  - `\"keybinding\"`: Via a keydown event according to the configured keybinding for the command.\n   */\n  trigger_type: 'keybinding' | 'click'\n  /**\n   * HTML of the opening tag of the target element for the event that triggered this command. When `trigger_type` is\n   * `\"keybinding\"` this is the currently focused element if there is one; otherwise it will be the `<body>`.\n   */\n  target_element_html?: string\n  /** The keybinding (in hotkey string format) configured for this command, if there is one. */\n  keybinding?: NormalizedSequenceString\n  /** If the handler threw an exception synchronously, this is a string representation of that exception. */\n  handler_exception?: string\n}\nconst CommandTriggerEvent = {\n  TYPE: 'command.trigger',\n  send(context: CommandTriggerEvent) {\n    client.sendEvent(CommandTriggerEvent.TYPE, context)\n  },\n}\n\n/** Get the opening HTML tag of the given element. */\nfunction getOpeningHtmlTag(element: HTMLElement) {\n  const tagName = element.tagName.toLowerCase()\n  const attributes = Array.from(element.attributes)\n    .map(attr => `${attr.name}=\"${attr.value.replaceAll('\"', '\\\\\"')}\"`)\n    .join(' ')\n  return `<${tagName}${attributes ? ` ${attributes}` : ''}>`\n}\n\n/** Record a Hydro analytics event for triggering a command. */\nexport function recordCommandTriggerEvent(commandEvent: CommandEvent, domEvent: KeyboardEvent | MouseEvent) {\n  CommandTriggerEvent.send({\n    command_id: commandEvent.commandId,\n\n    trigger_type: domEvent instanceof KeyboardEvent ? 'keybinding' : 'click',\n\n    target_element_html: domEvent.target instanceof HTMLElement ? getOpeningHtmlTag(domEvent.target) : undefined,\n    keybinding: getKeybinding(commandEvent.commandId),\n  })\n}\n","import type {NormalizedSequenceString} from '@github-ui/hotkey'\nimport {useEffect, useMemo} from 'react'\n\nimport {CommandEventHandlersMap} from './command-event'\nimport type {CommandId} from './commands'\nimport {getKeybindings} from './commands'\nimport {filterOnce} from './utils'\n\n/**\n * Mutable map of registered commands. Keys are the resolved keybindings, while the values are arrays of all\n * existing registered command IDs with that keybinding. Since the same command could potentially be accidentally\n * registered twice, the value is an array rather than a set.\n */\ntype CommandRegistry = Map<NormalizedSequenceString, readonly CommandId[]>\n\nconst registeredGlobalCommands: CommandRegistry = new Map()\n\nexport function useDetectConflicts(scope: 'global' | 'scoped', commands: CommandEventHandlersMap) {\n  const registeredScopedCommands = useMemo<CommandRegistry>(() => new Map(), [])\n\n  const registeredCommands = scope === 'global' ? registeredGlobalCommands : registeredScopedCommands\n\n  /** Add commands to the global registry and log a warning if there is a conflict. */\n  useEffect(() => {\n    for (const [commandId, keybinding] of getKeybindings(CommandEventHandlersMap.keys(commands))) {\n      const alreadyRegisteredIds = registeredCommands.get(keybinding)?.filter(id => id !== commandId) ?? []\n\n      if (alreadyRegisteredIds.length)\n        // eslint-disable-next-line no-console\n        console.warn(\n          `The keybinding (${keybinding}) for the \"${commandId}\" command conflicts with the keybinding for the already-registered command(s) \"${alreadyRegisteredIds.join(\n            ', ',\n          )}\". This may result in unpredictable behavior.`,\n        )\n\n      registeredCommands.set(keybinding, alreadyRegisteredIds.concat(commandId))\n    }\n\n    return () => {\n      for (const [commandId, keybinding] of getKeybindings(CommandEventHandlersMap.keys(commands))) {\n        // If it was registered multiple times, be careful only to remove one so we can accurately keep warning\n        const remainingCommandIds = filterOnce(registeredCommands.get(keybinding) ?? [], commandId)\n\n        if (remainingCommandIds?.length) registeredCommands.set(keybinding, remainingCommandIds)\n        else registeredCommands.delete(keybinding)\n      }\n    }\n  }, [commands, registeredCommands])\n}\n","/** Return a copy of the array without the first encountered instance of `value` (based on `===` comparison). */\nexport function filterOnce<T>(array: readonly T[], value: T) {\n  let encounteredOnce = false\n  return array.filter(el => {\n    if (el === value && !encounteredOnce) {\n      encounteredOnce = true\n      return false\n    }\n    return true\n  })\n}\n\nexport function getActiveModal() {\n  const modals =\n    // unfortunately, jsdom doesn't support yet the `:modal` pseudo-class\n    // and throws an error in tests, so we remove it from the query\n    process.env.NODE_ENV === 'test'\n      ? [...document.querySelectorAll('[role=\"dialog\"][aria-modal=\"true\"]')]\n      : [...document.querySelectorAll('dialog:modal, [role=\"dialog\"][aria-modal=\"true\"]')]\n  const nonEmptyModals = modals.filter(modal => {\n    return modal.childNodes.length > 0 && elementHasNonZeroHeight(modal)\n  })\n  return nonEmptyModals.length ? nonEmptyModals[nonEmptyModals.length - 1] : null\n}\n\nexport function isInsideModal(modal: Element, element?: HTMLElement | null) {\n  if (!element) {\n    return false\n  }\n\n  return modal.contains(element) ?? false\n}\n\nfunction elementHasNonZeroHeight(element: Element): boolean {\n  if (element.clientHeight > 0) return true\n\n  for (const child of element.children) {\n    if (elementHasNonZeroHeight(child)) return true\n  }\n\n  return false\n}\n","import type {NormalizedSequenceString} from '@github-ui/hotkey'\nimport {eventToHotkeyString, SequenceTracker} from '@github-ui/hotkey'\nimport {isShortcutAllowed} from '@github-ui/hotkey/keyboard-shortcuts-helper'\nimport {useCallback, useMemo, useRef} from 'react'\n\nimport type {CommandId} from './commands'\nimport {getKeybinding} from './commands'\n\nexport function useOnKeyDown(\n  commandsIds: CommandId[],\n  triggerCommand: (id: CommandId, event: KeyboardEvent) => void,\n  shouldTrigger?: () => boolean,\n) {\n  const sequenceTracker = useMemo(() => new SequenceTracker(), [])\n\n  /** Map of keybinding string to command ID for fast lookup. */\n  const keybindingMap = useMemo(() => {\n    const map = new Map<NormalizedSequenceString, CommandId>()\n\n    for (const id of commandsIds) {\n      const keybinding = getKeybinding(id)\n      if (keybinding) map.set(keybinding, id)\n    }\n\n    return map\n  }, [commandsIds])\n\n  const lastEventRef = useRef<KeyboardEvent | null>(null)\n\n  return useCallback(\n    (event: React.KeyboardEvent | KeyboardEvent) => {\n      const nativeEvent = 'nativeEvent' in event ? event.nativeEvent : event\n      // This handler may be registered at both the DOM and React levels; in that case we want to avoid registering /\n      // handling the same event twice.\n      if (lastEventRef.current === nativeEvent) return\n      lastEventRef.current = nativeEvent\n\n      if (!isShortcutAllowed(nativeEvent)) {\n        sequenceTracker.reset()\n        return\n      }\n\n      sequenceTracker.registerKeypress(nativeEvent)\n\n      // First look for matching sequences, then for a matching hotkey for just this press\n      const commandId =\n        keybindingMap.get(sequenceTracker.sequence) ?? keybindingMap.get(eventToHotkeyString(nativeEvent))\n      if (!commandId) return\n\n      if (shouldTrigger !== undefined && !shouldTrigger()) return\n\n      sequenceTracker.reset()\n      event.preventDefault()\n      event.stopPropagation()\n      // avoids double triggering an event if an element is rendered twice\n      // for example when a mobile version is hidden by CSS\n      nativeEvent.stopImmediatePropagation()\n\n      triggerCommand(commandId, nativeEvent)\n    },\n    [keybindingMap, sequenceTracker, triggerCommand, shouldTrigger],\n  )\n}\n","import {useCallback, useEffect, useRef} from 'react'\n\nimport {CommandEvent, CommandEventHandlersMap} from '../command-event'\nimport {CommandId} from '../commands'\nimport {useRegisterCommands} from '../commands-registry'\nimport {recordCommandTriggerEvent} from '../metrics'\nimport {useDetectConflicts} from '../use-detect-conflicts'\nimport {useOnKeyDown} from '../use-on-key-down'\nimport {getActiveModal, isInsideModal} from '../utils'\n\nexport interface GlobalCommandsProps {\n  /** Map of command IDs to the corresponding event handler. */\n  commands: CommandEventHandlersMap\n}\n\n/**\n * There's no context for global commands because they can be defined in any react app on the page. So to be able to\n * trigger them without keyboard events, we emit and listen for custom DOM events instead.\n */\nconst customDomEventName = 'ui-command-trigger'\n\n/** Trigger a global command without a keyboard event. */\nexport function dispatchGlobalCommand(commandId: CommandId, domEvent: KeyboardEvent | MouseEvent) {\n  document.dispatchEvent(\n    new CustomEvent(customDomEventName, {\n      detail: {\n        commandId,\n        domEvent,\n      },\n    }),\n  )\n}\n\n/**\n * Provide command handlers that are activatable when focus is anywhere on the current page, including outside this\n * React app.\n *\n * @example\n * <GlobalCommands commands={{'issues:navigateToCode': navigateToCode}} />\n */\nexport const GlobalCommands = ({commands}: GlobalCommandsProps) => {\n  const element = useRef<HTMLDivElement>(null)\n  const triggerCommand = useCallback(\n    <T extends CommandId>(commandId: T, domEvent: KeyboardEvent | MouseEvent) => {\n      const handler = commands[commandId]\n\n      if (handler) {\n        const event = new CommandEvent(commandId)\n        try {\n          handler(event)\n        } finally {\n          recordCommandTriggerEvent(event, domEvent)\n        }\n      }\n    },\n    [commands],\n  )\n\n  const shouldTrigger = useCallback(() => {\n    const activeModal = getActiveModal()\n    if (!activeModal) return true\n\n    return isInsideModal(activeModal, element.current)\n  }, [])\n\n  const onKeyDown = useOnKeyDown(CommandEventHandlersMap.keys(commands), triggerCommand, shouldTrigger)\n\n  useDetectConflicts('global', commands)\n\n  useRegisterCommands(commands)\n\n  useEffect(() => {\n    // Types for this are a massive pain because _anything_ can emit an event with this name\n    const onCustomEvent = (event: Event) => {\n      const detail = 'detail' in event && typeof event.detail === 'object' ? event.detail : undefined\n      if (!detail) return\n\n      const commandId =\n        'commandId' in detail && typeof detail.commandId === 'string' && CommandId.is(detail.commandId)\n          ? detail.commandId\n          : undefined\n      const domEvent =\n        'domEvent' in detail && (detail.domEvent instanceof KeyboardEvent || detail.domEvent instanceof MouseEvent)\n          ? detail.domEvent\n          : undefined\n      if (!commandId || !domEvent) return\n\n      triggerCommand(commandId, domEvent)\n    }\n\n    document.addEventListener('keydown', onKeyDown)\n    document.addEventListener(customDomEventName, onCustomEvent)\n\n    return () => {\n      document.removeEventListener('keydown', onKeyDown)\n      document.removeEventListener(customDomEventName, onCustomEvent)\n    }\n  }, [onKeyDown, triggerCommand, element])\n\n  return <div ref={element} className=\"d-none\" />\n}\n\ntry{ GlobalCommands.displayName ||= 'GlobalCommands' } catch {}","import {createContext, useContext} from 'react'\n\nimport type {CommandId} from './commands'\nimport {dispatchGlobalCommand} from './components/GlobalCommands'\n\ninterface CommandsContext {\n  triggerCommand: (id: CommandId, domEvent: KeyboardEvent | MouseEvent) => void\n}\n\nconst CommandsContext = createContext<CommandsContext>({\n  // Without any scope context, we just emit a global event\n  triggerCommand: dispatchGlobalCommand,\n})\n\nexport const CommandsContextProvider = CommandsContext.Provider\n\nexport const useCommandsContext = () => useContext(CommandsContext)\n","import {KeybindingHint, type KeybindingHintProps} from '@primer/react/experimental'\n\nimport type {CommandId} from '../commands'\nimport {getKeybinding} from '../commands'\n\ninterface CommandKeybindingHintProps extends Omit<KeybindingHintProps, 'keys'> {\n  commandId: CommandId\n}\n\n/** Renders a visual representing the keybinding for a command. If no keybinding is present, renders nothing. */\nexport const CommandKeybindingHint = ({commandId, ...props}: CommandKeybindingHintProps) => {\n  const keys = getKeybinding(commandId)\n  return keys ? <KeybindingHint keys={keys} {...props} /> : null\n}\n\ntry{ CommandKeybindingHint.displayName ||= 'CommandKeybindingHint' } catch {}","import type {ActionListItemProps} from '@primer/react'\nimport {ActionList} from '@primer/react'\nimport {forwardRef} from 'react'\n\nimport {type CommandId, getCommandMetadata} from '../commands'\nimport {useCommandsContext} from '../commands-context'\nimport {CommandKeybindingHint} from './CommandKeybindingHint'\n\nexport interface CommandActionListItemProps extends Omit<ActionListItemProps, 'onClick'> {\n  commandId: CommandId\n  /** If `children` is not provided, the item will render the command name by default. */\n  children?: ActionListItemProps['children']\n  /**\n   * Set the item description (components that wrap Primer components can't use the composable APIs, so this is\n   * required instead of `ActionList.Description`).\n   */\n  description?: React.ReactNode\n  /**\n   * Set the leading visual (components that wrap Primer components can't use the composable APIs, so this is\n   * required instead of `ActionList.LeadingVisual`).\n   */\n  leadingVisual?: React.ReactNode\n  /**\n   * Override the trailing visual (components that wrap Primer components can't use the composable APIs, so this is\n   * required instead of `ActionList.TrailingVisual`).\n   *\n   * By default, if a keybinding is configured for the command, this will be a visual keybinding hint. To disable this\n   * without providing an alternative, set `trailingVisual` to `null`.\n   */\n  trailingVisual?: React.ReactNode\n}\n\n/**\n * `CommandActionListItem` is a wrapper around `@primer/react` `ActionList.Item`, but instead of an `onClick` handler\n * it takes a command ID and handles clicks by emitting command trigger events.\n *\n * If the command is gated by a disabled feature flag, nothing will render.\n */\nexport const CommandActionListItem = forwardRef<HTMLLIElement, CommandActionListItemProps>(\n  ({commandId, children, description, leadingVisual, trailingVisual, ...forwardProps}, ref) => {\n    const metadata = getCommandMetadata(commandId)\n    const {triggerCommand} = useCommandsContext()\n\n    if (!metadata) return null\n\n    return (\n      <ActionList.Item {...forwardProps} onSelect={event => triggerCommand(commandId, event.nativeEvent)} ref={ref}>\n        {children ?? metadata.name}\n\n        {description ? <ActionList.Description truncate>{description}</ActionList.Description> : null}\n\n        {leadingVisual ? <ActionList.LeadingVisual>{leadingVisual}</ActionList.LeadingVisual> : null}\n\n        {\n          // Allow disabling the keybinding hint by explicitly setting `trailingVisual` to `null`\n          trailingVisual !== null && (\n            <ActionList.TrailingVisual>\n              {trailingVisual ?? <CommandKeybindingHint commandId={commandId} format=\"condensed\" />}\n            </ActionList.TrailingVisual>\n          )\n        }\n      </ActionList.Item>\n    )\n  },\n)\nCommandActionListItem.displayName = 'ActionList.CommandItem'\n","import type {IconButtonProps} from '@primer/react'\nimport {IconButton} from '@primer/react'\nimport {forwardRef} from 'react'\n\nimport {type CommandId, getCommandMetadata, getKeybinding} from '../commands'\nimport {useCommandsContext} from '../commands-context'\n\nexport interface CommandIconButtonProps extends Omit<IconButtonProps, 'onClick' | 'aria-label' | 'aria-labelledby'> {\n  commandId: CommandId\n  /** If `aria-label` is not provided, the button will render the command name as its label by default. */\n  ['aria-label']?: IconButtonProps['aria-label']\n}\n\n/**\n * `CommandButton` is a wrapper around `@primer/react` `Button`, but instead of an `onClick` handler it takes a\n * command ID and handles clicks by emitting command trigger events.\n *\n * If the command is gated by a disabled feature flag, nothing will render.\n */\nexport const CommandIconButton = forwardRef<HTMLButtonElement, CommandIconButtonProps>(\n  ({commandId, ['aria-label']: ariaLabel, ...forwardProps}, ref) => {\n    const metadata = getCommandMetadata(commandId)\n    const {triggerCommand} = useCommandsContext()\n\n    if (!metadata) return null\n\n    return (\n      <IconButton\n        aria-label={ariaLabel ?? metadata.name}\n        onClick={event => triggerCommand(commandId, event.nativeEvent)}\n        ref={ref}\n        keybindingHint={getKeybinding(commandId)}\n        {...forwardProps}\n      />\n    )\n  },\n)\nCommandIconButton.displayName = 'CommandIconButton'\n","import {useIgnoreKeyboardActionsWhileComposing} from '@github-ui/use-ignore-keyboard-actions-while-composing'\nimport {useTrackingRef} from '@github-ui/use-tracking-ref'\nimport {useRefObjectAsForwardedRef} from '@primer/react'\nimport type {ForwardRefComponent} from '@radix-ui/react-polymorphic'\nimport {forwardRef, useCallback, useEffect, useMemo, useRef} from 'react'\n\nimport {CommandEvent, CommandEventHandlersMap} from '../command-event'\nimport type {CommandId} from '../commands'\nimport {CommandsContextProvider, useCommandsContext} from '../commands-context'\nimport {useRegisterCommands} from '../commands-registry'\nimport {recordCommandTriggerEvent} from '../metrics'\nimport {useDetectConflicts} from '../use-detect-conflicts'\nimport {useOnKeyDown} from '../use-on-key-down'\n\nexport interface ScopedCommandsProps {\n  /** Map of command IDs to the corresponding event handler. */\n  commands: CommandEventHandlersMap\n  // 🧙 You Shall Not Pass:\n  onCompositionStart?: never\n  onCompositionEnd?: never\n  onKeyDown?: never\n}\n\n/**\n * Provide command handlers that only work when focus is within a certain part of the React component tree.\n *\n * NOTE: By default this component will wrap contents in a `div` with `display: contents`. In certain cases this breaks\n * the page's HTML structure (for example, when wrapping list items or table cells). In this case the component element\n * type can be overridden with `as`.\n * @example\n * <ScopedCommands commands={{\n *   'commentBox:formatBold': handleFormatBold\n * }}>\n *   <textarea></textarea>\n * </ScopedCommands>\n */\nexport const ScopedCommands = forwardRef(({commands, as, ...props}, forwardedRef) => {\n  // We store the commands object in a ref so the context won't change on every render and recalculate the whole child tree\n  const commandsRef = useTrackingRef(commands)\n\n  const parentContext = useCommandsContext()\n\n  const triggerCommand = useCallback(\n    <T extends CommandId>(commandId: T, domEvent: KeyboardEvent | MouseEvent) => {\n      const handler = commandsRef.current[commandId]\n\n      if (handler) {\n        const event = new CommandEvent(commandId)\n        try {\n          handler(event)\n        } finally {\n          recordCommandTriggerEvent(event, domEvent)\n        }\n      } else {\n        // no handler here, pass it on up\n        parentContext.triggerCommand(commandId, domEvent)\n      }\n    },\n    [commandsRef, parentContext],\n  )\n\n  useDetectConflicts('scoped', commands)\n\n  useRegisterCommands(commands)\n\n  const contextValue = useMemo(() => ({triggerCommand}), [triggerCommand])\n\n  const onKeyDown = useOnKeyDown(CommandEventHandlersMap.keys(commands), triggerCommand)\n\n  const keyDownProps = useIgnoreKeyboardActionsWhileComposing(onKeyDown)\n\n  const containerRef = useRef<HTMLDivElement>(null)\n  useRefObjectAsForwardedRef(forwardedRef, containerRef)\n\n  // Events first bubble up the DOM tree, then React handles them at the document level and rebuilds a 'synthetic'\n  // JSX tree. If we only handle our events with React, we cannot stop native DOM handlers from capturing those events\n  // first, even if we `stopPropagation`. For example, `@primer/behaviors` uses DOM handlers. So must handle events\n  // with DOM handlers so we can 'get to them first'. However, this is not good enough because with scoped commands we\n  // want the user to be able to fire commands when their focus is inside a menu overlay. This only works with React\n  // handlers because overlays are rendered inside Portals. So we must bind _both_ DOM and React handlers, allowing\n  // `useOnKeyDown` to handle ignoring duplicates.\n  useEffect(() => {\n    const target = containerRef.current\n    // we are lying by passing DOM events to a React handler, but it works in this case because the handler we passed in can accept DOM events\n    const handler = keyDownProps.onKeyDown as unknown as (e: KeyboardEvent) => void\n    if (!target) return\n\n    target.addEventListener('keydown', handler)\n    return () => target.removeEventListener('keydown', handler)\n  })\n\n  // Typically we want to avoid `display: contents` due to its rocky history in terms of web browser accessibility\n  // support. We've seen bugs appear, get fixed, and then regress again with this property. Unfortunately, there's no\n  // good alternative here. We must wrap contents in some element to intercept keyboard shortcuts, and wrapping\n  // contents in an element inherently introduces potential style and layout breaks. The only way to avoid that is\n  // with `display: contents`; otherwise consumers will have to deal with fixing everything that this breaks every time\n  // they use this component and they will be discouraged from adopting the new platform.\n  //\n  // If `as` is set to something other than `div`, or if a className was passed to explicitly set some styling, we don't do this,\n  // because we assume the consumer is now thinking about styling and expects an element to appear.\n  //\n  // IMPORTANT: even with this in place, adding a div can still break some css rules, so be careful when using this.\n  // for example:\n  // - If the wrapped component has a selector such as `:not(:first-child)`, it will break since it will now be the first child\n  // - If the parent has any direct decendant selectors, they will now be broken\n  //\n  // Before using, the best approach is to inspect the elements in the browser dev tools and look for any css rules that\n  // might be affected by this change.\n  const style = as !== undefined || props.className !== undefined ? undefined : {display: 'contents'}\n  const Wrapper = as ?? 'div'\n\n  return (\n    <CommandsContextProvider value={contextValue}>\n      <Wrapper style={style} {...props} {...keyDownProps} ref={containerRef} />\n    </CommandsContextProvider>\n  )\n}) as ForwardRefComponent<'div', ScopedCommandsProps>\nScopedCommands.displayName = 'ScopedCommands'\n","import {isMacOS} from '@github-ui/get-os'\nimport {type CompositionEventHandler, type KeyboardEventHandler, useCallback, useMemo, useRef} from 'react'\n\nconst ignoredKeysLowercase = new Set(['enter', 'tab'])\n\n/**\n * If the user is composing text, we don't want to respond to\n * the `Enter` key to perform a typical activation\n *\n * Composing text is a special case where the user is inputting\n * text from IME (e.g. Japanese) and we don't want to save the\n * item upon receiving the enter key as that may be part of the\n * selection of the character into the input.\n *\n * issue: https://github.com/github/memex/issues/5680\n * related: https://github.com/github/memex/issues/5680\n * related: https://github.com/facebook/react/issues/3926\n *\n * @param onKeyDown: A keyboard handler callback to wrap with a callback which ignores `ENTER`\n * and `TAB` while composing.\n *\n * @returns props which should be spread onto an `<input>` element\n **/\nexport const useIgnoreKeyboardActionsWhileComposing = (\n  onKeyDown: KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement | HTMLDivElement>,\n) => {\n  const isComposingRef = useRef(false)\n  const hasCompositionEndedRef = useRef(false)\n\n  const handleComposition: CompositionEventHandler<HTMLInputElement | HTMLTextAreaElement | HTMLDivElement> =\n    useCallback(event => {\n      if (event.type === 'compositionstart') {\n        isComposingRef.current = true\n        hasCompositionEndedRef.current = false\n      }\n      if (event.type === 'compositionend') {\n        isComposingRef.current = false\n        hasCompositionEndedRef.current = true\n      }\n    }, [])\n\n  const wrappedOnKeyDown: KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement | HTMLDivElement> = useCallback(\n    event => {\n      // eslint-disable-next-line @github-ui/ui-commands/no-manual-shortcut-logic\n      if (ignoredKeysLowercase.has(event.key.toLowerCase()) && isComposingRef.current) {\n        return\n      }\n\n      /*\n       * Safari is known to fire the a unprintable keydown event of 229\n       * after the `compositionend` event.\n       * This is a workaround to prevent the keydown event from firing and causing\n       * the input to be saved.\n       *\n       * Related: https://bugs.webkit.org/show_bug.cgi?id=165004\n       * Related: https://www.stum.de/2016/06/24/handling-ime-events-in-javascript/\n       */\n\n      if (isMacOS() && event.keyCode === 229 && hasCompositionEndedRef.current) {\n        hasCompositionEndedRef.current = false\n        return\n      }\n      onKeyDown(event)\n    },\n    [onKeyDown],\n  )\n\n  const inputProps = useMemo(() => {\n    return {\n      onCompositionStart: handleComposition,\n      onCompositionEnd: handleComposition,\n      onKeyDown: wrappedOnKeyDown,\n    }\n  }, [handleComposition, wrappedOnKeyDown])\n\n  return inputProps\n}\n","import {useLayoutEffect} from '@github-ui/use-layout-effect'\nimport {useRef} from 'react'\n\nexport function useTrackingRef<T>(value: T): React.MutableRefObject<T> {\n  const ref = useRef(value)\n\n  useLayoutEffect(() => {\n    ref.current = value\n  }, [value])\n\n  return ref\n}\n"],"names":["OS","Android","iOS","macOS","Windows","Linux","Unknown","isMacOS","getOS","os","isMobileOS","ssrSafeWindow","navigator","userAgent","platform","userAgentData","macosPlatforms","indexOf","iosPlatforms","windowsPlatforms","test","mobile","isAndroid","isIOS","isWindows","isLinux","isDesktop","isMobile","chordOrKeyRegex","splitHotkeyString","hotkey","Array","from","matchAll","map","chord","areCharacterKeyShortcutsEnabled","document","keyboardShortcutsPreference","querySelector","content","isNonCharacterKeyShortcut","includes","nonEditableInputTypes","Set","isShortcutAllowed","eventToHotkeyString","event","allowCharacterKeyShortcuts","isEditableElement","target","HTMLElement","name","nodeName","toLowerCase","type","getAttribute","isReadonly","ariaReadOnly","has","isContentEditable","CommandEvent","constructor","commandId","CommandEventHandlersMap","entries","Object","filter","CommandId","is","entry","undefined","keys","registeredCommands","Map","getAllRegisteredCommands","uiCommandGroupMap","values","flat","serviceId","getServiceId","service","getServiceMetadata","set","id","commands","command","getCommandMetadata","defaultBinding","get","push","description","keybinding","useRegisterCommands","sourceId","useId","useEffect","delete","services","serviceCommandIds","str","split","metadata","featureFlag","isFeatureEnabled","toUpperCase","getKeybinding","normalizeSequence","getKeybindings","commandIds","HintVisual","client","AnalyticsClient","collectorUrl","CommandTriggerEvent","TYPE","send","context","sendEvent","recordCommandTriggerEvent","commandEvent","domEvent","command_id","trigger_type","KeyboardEvent","target_element_html","getOpeningHtmlTag","element","tagName","attributes","attr","value","replaceAll","join","registeredGlobalCommands","useDetectConflicts","scope","registeredScopedCommands","useMemo","alreadyRegisteredIds","length","console","warn","concat","remainingCommandIds","filterOnce","array","encounteredOnce","el","useOnKeyDown","commandsIds","triggerCommand","shouldTrigger","sequenceTracker","SequenceTracker","keybindingMap","lastEventRef","useRef","useCallback","nativeEvent","current","reset","registerKeypress","sequence","preventDefault","stopPropagation","stopImmediatePropagation","customDomEventName","GlobalCommands","handler","activeModal","getActiveModal","nonEmptyModals","modals","querySelectorAll","modal","childNodes","elementHasNonZeroHeight","clientHeight","child","children","isInsideModal","contains","onKeyDown","onCustomEvent","detail","MouseEvent","addEventListener","removeEventListener","div","ref","className","displayName","CommandsContext","createContext","dispatchEvent","CustomEvent","CommandsContextProvider","Provider","useCommandsContext","useContext","CommandKeybindingHint","props","KeybindingHint","CommandActionListItem","forwardRef","leadingVisual","trailingVisual","forwardProps","ActionList","Item","onSelect","Description","truncate","LeadingVisual","TrailingVisual","format","CommandButton","showKeybindingHint","keybindingHintVariant","variant","Button","onClick","span","CommandIconButton","ariaLabel","IconButton","aria-label","keybindingHint","ScopedCommands","as","forwardedRef","commandsRef","useTrackingRef","parentContext","contextValue","keyDownProps","useIgnoreKeyboardActionsWhileComposing","containerRef","useRefObjectAsForwardedRef","style","display","Wrapper","ignoredKeysLowercase","isComposingRef","hasCompositionEndedRef","handleComposition","wrappedOnKeyDown","key","keyCode","onCompositionStart","onCompositionEnd","useLayoutEffect"],"sourceRoot":""}